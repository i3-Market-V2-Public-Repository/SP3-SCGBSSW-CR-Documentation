@startuml nrpStep3
skinparam shadowing false
skinparam DefaultFontName DejaVu Sans
skinparam DefaultMonospacedFontName DejaVu Sans Mono
skinparam ArrowFontName DejaVu Sans Mono
skinparam maxMessageSize 370

title "i3M NRP - step 3: provider publishes the secret, and consumer decrypts the cipherblock"

box "i3M Consumer" #White
  participant "Consumer: SDA SDK" as C #99FF99
end box
box "i3M Provider" #White
  participant "SDA API\n: Data Transfer Manager" as P #FFAAAA
end box
box "i3M Backplane\n" #F6F6FF
  participant "i3-MARKET DLT" as DLT
end box

P->DLT: call sc setregistry(exchangeId, secret)
note left #FFE9E9
  1. Provider publishes secret on the DLT.

  The one-time secret that was used to encrypt 
  the block is published to the DLT using the 
  non-repudiation smart contract.
  The secret can be queried with known signer
  (provider address) and exchangeId. 
end note
P->P: PoP=JWS<sub>consumer</sub>({\n\
  iss: 'orig',\n\
  proofType: 'PoP',\n\
  iat: <timestamp_now>,\n\
  exchange: <the same exchange in the PoO>\n\
  por: string, // The PoR as a compact JWS.\n\
  secret: string // Compact JWK of the secret\n\
  verificationCode: string // DLT tx hash\n\
})
note left #FFE9E9
  2. Provider creates the PoP.

  A proof of publication ("PoP") is created, 
  but only to accelarate the process, since
  the actual PoP is the secret published 
  with the smart contract. In any case,
  receiving the PoP is likely faster than
  waiting for the secret to be published on
  the DLT.
end note
P-->C: PoP

note right of C #E9FFE9
  3. Consumer gets the secret in the PoP
end note

opt no response || lost response
  P -->x C: PoP
  note right of C #E9FFE9
    3.5. If the PoP is not received, the consumer
    downloads the secret from the DLT.

    With the PoR, the consumer commited to get
    the secret from the DLT even if the PoP was
    not received.
    In any case, there is a predefined/agreed
    max timeout ""pooToSecretDelay"" to wait
    for the ""secret"" to be avalaible on the DLT
  end note
  loop while secret not received && currentTime < PoO.iat + pooToSecretDelay
    C->DLT++: getSecret (exchange.ledgerSignerAddress, exchange.id)
    return { secret, secretIat }
  end
end
  
C->C: verify:\n secretIat < PoO.iat + pooToSecretDelay\n hash(secret) == PoO.exchange.secretCommitment
note right #E9FFE9
  4. The consumer verifies the secret
end note

opt secret not published in time || invalid secret
  C->>P !!: terminate
end

note right of C #E9FFE9
  5. The consumer decrypts the cipherblock.
end note

C->C: decrypt cipherblock with secret:\n  decryptedBlock=Dec<sub>secret</sub>(cipherblock)

C->C: validate that:\n  decryptedBlock meets  PoO.exchange.schema

opt bad decryption || validation failed
  C->>P !!: terminate
end
@enduml